Using default execution policy of 'arn:aws:iam::aws:policy/AdministratorAccess'. Pass '--cloudformation-execution-policies' to customize.
 âœ…  Environment aws://574482439656/us-west-2 bootstrapped (no changes).
Synthesizing CloudFormation templates...
Deploying with account=574482439656, region=us-west-2
[WARNING] aws-cdk-lib.aws_stepfunctions.StateMachineProps#definition is deprecated.
  use definitionBody: DefinitionBody.fromChainable()
  This API will be removed in the next major release.
[WARNING] aws-cdk-lib.aws_stepfunctions.StateMachineProps#definition is deprecated.
  use definitionBody: DefinitionBody.fromChainable()
  This API will be removed in the next major release.
Bundling asset PodcastProcessorTriggersStack/S3EventBridgeFunction/Code/Stage...
npm error code EACCES
npm error syscall mkdir
npm error path /.npm
npm error errno EACCES
npm error
npm error Your cache folder contains root-owned files, due to a bug in
npm error previous versions of npm which has since been addressed.
npm error
npm error To permanently fix this problem, please run:
npm error   sudo chown -R 504:20 "/.npm"
npm error Log files were not written due to an error writing to the directory: /.npm/_logs
npm error You can rerun the command with `--loglevel=verbose` to see the logs in your terminal
/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/node_modules/aws-cdk-lib/core/lib/asset-staging.js:2
`),localBundling=options.local?.tryBundle(tempDir,options),!localBundling){const assetStagingOptions={sourcePath:this.sourcePath,bundleDir:tempDir,...options};switch(options.bundlingFileAccess){case bundling_1().BundlingFileAccess.VOLUME_COPY:new(asset_staging_1()).AssetBundlingVolumeCopy(assetStagingOptions).run();break;case bundling_1().BundlingFileAccess.BIND_MOUNT:default:new(asset_staging_1()).AssetBundlingBindMount(assetStagingOptions).run();break}}fs().renameSync(tempDir,bundleDir)}catch(err){throw new Error(`Failed to bundle asset ${this.node.path}, bundle output is located at ${tempDir}: ${err}`)}if(fs_1().FileSystem.isEmpty(bundleDir)){const outputDir=localBundling?bundleDir:AssetStaging.BUNDLING_OUTPUT_DIR;throw new Error(`Bundling did not produce any output. Check that content is written to ${outputDir}.`)}}calculateHash(hashType,bundling,outputDir){if(hashType==assets_1().AssetHashType.CUSTOM||hashType==assets_1().AssetHashType.SOURCE&&bundling){const hash=crypto().createHash("sha256");return hash.update(this.customSourceFingerprint??fs_1().FileSystem.fingerprint(this.sourcePath,this.fingerprintOptions)),bundling&&hash.update(JSON.stringify(bundling,sanitizeHashValue)),hash.digest("hex")}switch(hashType){case assets_1().AssetHashType.SOURCE:return fs_1().FileSystem.fingerprint(this.sourcePath,this.fingerprintOptions);case assets_1().AssetHashType.BUNDLE:case assets_1().AssetHashType.OUTPUT:if(!outputDir)throw new Error(`Cannot use \`${hashType}\` hash type when \`bundling\` is not specified.`);return fs_1().FileSystem.fingerprint(outputDir,this.fingerprintOptions);default:throw new Error("Unknown asset hash type.")}}renderStagedPath(sourcePath,targetPath){return this.hashType!==assets_1().AssetHashType.OUTPUT&&path().dirname(sourcePath)===targetPath&&(targetPath=targetPath+"_noext"),targetPath}}exports.AssetStaging=AssetStaging,_a=JSII_RTTI_SYMBOL_1,AssetStaging[_a]={fqn:"aws-cdk-lib.AssetStaging",version:"2.188.0"},AssetStaging.BUNDLING_INPUT_DIR="/asset-input",AssetStaging.BUNDLING_OUTPUT_DIR="/asset-output",AssetStaging.assetCache=new(cache_1()).Cache;function renderAssetFilename(assetHash,extension=""){return`asset.${assetHash}${extension}`}function determineHashType(assetHashType,customSourceFingerprint){const hashType=customSourceFingerprint?assetHashType??assets_1().AssetHashType.CUSTOM:assetHashType??assets_1().AssetHashType.SOURCE;if(customSourceFingerprint&&hashType!==assets_1().AssetHashType.CUSTOM)throw new Error(`Cannot specify \`${assetHashType}\` for \`assetHashType\` when \`assetHash\` is specified. Use \`CUSTOM\` or leave \`undefined\`.`);if(hashType===assets_1().AssetHashType.CUSTOM&&!customSourceFingerprint)throw new Error("`assetHash` must be specified when `assetHashType` is set to `AssetHashType.CUSTOM`.");return hashType}function calculateCacheKey(props){return crypto().createHash("sha256").update(JSON.stringify(sortObject(props),sanitizeHashValue)).digest("hex")}function sortObject(object){if(typeof object!="object"||object instanceof Array)return object;const ret={};for(const key of Object.keys(object).sort())ret[key]=sortObject(object[key]);return ret}function sanitizeHashValue(key,value){if(key==="PIP_INDEX_URL"||key==="PIP_EXTRA_INDEX_URL")try{let url=new URL(value);if(url.password)return url.password="",url.toString()}catch(e){throw e.name==="TypeError"?new Error(`${key} must be a valid URL, got ${value}.`):e}return value}function findSingleFile(directory,archiveOnly){if(!fs().existsSync(directory))throw new Error(`Directory ${directory} does not exist.`);if(!fs().statSync(directory).isDirectory())throw new Error(`${directory} is not a directory.`);const content=fs().readdirSync(directory);if(content.length===1){const file=path().join(directory,content[0]),extension=getExtension(content[0]).toLowerCase();if(fs().statSync(file).isFile()&&(!archiveOnly||ARCHIVE_EXTENSIONS.includes(extension)))return file}}function determineBundledAsset(bundleDir,outputType){const archiveFile=findSingleFile(bundleDir,outputType!==bundling_1().BundlingOutput.SINGLE_FILE);switch(outputType===bundling_1().BundlingOutput.AUTO_DISCOVER&&(outputType=archiveFile?bundling_1().BundlingOutput.ARCHIVED:bundling_1().BundlingOutput.NOT_ARCHIVED),outputType){case bundling_1().BundlingOutput.NOT_ARCHIVED:return{path:bundleDir,packaging:assets_1().FileAssetPackaging.ZIP_DIRECTORY};case bundling_1().BundlingOutput.ARCHIVED:case bundling_1().BundlingOutput.SINGLE_FILE:if(!archiveFile)throw new Error("Bundling output directory is expected to include only a single file when `output` is set to `ARCHIVED` or `SINGLE_FILE`");return{path:archiveFile,packaging:assets_1().FileAssetPackaging.FILE,extension:getExtension(archiveFile)}}}function getExtension(source){for(const ext of ARCHIVE_EXTENSIONS)if(source.toLowerCase().endsWith(ext))return ext;return path().extname(source)}

Error: Failed to bundle asset PodcastProcessorTriggersStack/S3EventBridgeFunction/Code/Stage, bundle output is located at /Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/cdk.out/asset.d166b6783119045c334d2b13d4098decfdb6b6d919a4740f3a58ad41563c713f-building: Error: docker exited with status 1
--> Command: docker run --rm -u "504:20" -v "/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/src/functions/s3-event-bridge:/asset-input:delegated" -v "/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/cdk.out/asset.d166b6783119045c334d2b13d4098decfdb6b6d919a4740f3a58ad41563c713f-building:/asset-output:delegated" -w "/asset-input" "public.ecr.aws/sam/build-nodejs18.x" bash -c "npm install && cp -r /asset-input/* /asset-output/"
    at AssetStaging.bundle (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/node_modules/aws-cdk-lib/core/lib/asset-staging.js:2:512)
    at AssetStaging.stageByBundling (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/node_modules/aws-cdk-lib/core/lib/asset-staging.js:1:5358)
    at stageThisAsset (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/node_modules/aws-cdk-lib/core/lib/asset-staging.js:1:2728)
    at Cache.obtain (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/node_modules/aws-cdk-lib/core/lib/private/cache.js:1:242)
    at new AssetStaging (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/node_modules/aws-cdk-lib/core/lib/asset-staging.js:1:3125)
    at new Asset (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/node_modules/aws-cdk-lib/aws-s3-assets/lib/asset.js:1:1252)
    at AssetCode.bind (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/node_modules/aws-cdk-lib/aws-lambda/lib/code.js:5:4375)
    at new Function (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/node_modules/aws-cdk-lib/aws-lambda/lib/function.js:1:10877)
    at new TriggersStack (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/lib/triggers-stack.ts:31:35)
    at Object.<anonymous> (/Users/hodgdav/Library/CloudStorage/WorkDocsDrive-Documents/development/podcast-processor/bin/podcast-processor.ts:48:23)
Subprocess exited with error 1